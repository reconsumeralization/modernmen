#!/usr/bin/env node

/**
 * Development Environment Loader
 * Ensures all development services and environment variables remain loaded during build process
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('🔧 Ensuring Development Environment is Loaded...');

class DevEnvironmentLoader {
  constructor() {
    this.rootDir = path.resolve(__dirname, '..');
    this.envFile = path.join(this.rootDir, '.env.development');
    this.dockerComposeFile = path.join(this.rootDir, 'docker-compose.dev.yml');
  }

  /**
   * Check if required environment variables are set
   */
  checkEnvironmentVariables() {
    console.log('📋 Checking environment variables...');

    const requiredVars = [
      'NODE_ENV',
      'DATABASE_URL',
      'PAYLOAD_SECRET',
      'NEXT_PUBLIC_APP_URL',
      'NEXTAUTH_URL',
      'NEXTAUTH_SECRET'
    ];

    const missingVars = requiredVars.filter(varName => !process.env[varName]);

    if (missingVars.length > 0) {
      console.log('⚠️  Missing required environment variables:', missingVars.join(', '));
      this.createDevEnvFile();
    } else {
      console.log('✅ All required environment variables are set');
    }
  }

  /**
   * Create development environment file if it doesn't exist
   */
  createDevEnvFile() {
    console.log('📝 Creating development environment file...');

    const devEnvContent = `# Development Environment Variables
# Auto-generated by ensure-dev-environment.js

# Application Configuration
NODE_ENV=development
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=dev-secret-key-${Date.now()}

# Database Configuration
DATABASE_URL=postgresql://postgres:password@localhost:5432/modernmen
POSTGRES_USER=postgres
POSTGRES_PASSWORD=password
POSTGRES_DB=modernmen

# Payload CMS Configuration
PAYLOAD_SECRET=dev-payload-secret-${Date.now()}
PAYLOAD_PUBLIC_SERVER_URL=http://localhost:3000

# Redis Configuration
REDIS_URL=redis://localhost:6379

# Development Tools
ENABLE_DEV_TOOLS=true
ENABLE_HOT_RELOAD=true
ENABLE_SOURCE_MAPS=true

# Build Configuration
SKIP_ENV_VALIDATION=false
BUILD_WITH_DEV_TOOLS=true

# SQLite fallback for development
SQLITE_DATABASE_URL=file:./dev.db

# Environment loading configuration
ENV_LOAD_TIMEOUT=5000
ENV_RETRY_ATTEMPTS=3
ENV_RETRY_DELAY=1000
`;

    try {
      fs.writeFileSync(this.envFile, devEnvContent, 'utf8');
      console.log('✅ Development environment file created:', this.envFile);
    } catch (error) {
      console.error('❌ Failed to create development environment file:', error.message);
    }
  }

  /**
   * Check if Docker services are running
   */
  checkDockerServices() {
    console.log('🐳 Checking Docker services...');

    try {
      // Check if docker-compose file exists
      if (!fs.existsSync(this.dockerComposeFile)) {
        console.log('⚠️  Docker compose file not found:', this.dockerComposeFile);
        return;
      }

      // Check if containers are running
      const result = execSync('docker ps --format "table {{.Names}}"', { encoding: 'utf8' });
      const runningContainers = result.split('\n').filter(line => line.includes('modernmen_'));

      if (runningContainers.length > 1) { // More than just the header
        console.log('✅ Docker services are running:');
        runningContainers.forEach(container => {
          if (container && !container.includes('NAMES')) {
            console.log(`  - ${container.trim()}`);
          }
        });
      } else {
        console.log('⚠️  Docker services not running. Starting development services...');
        this.startDockerServices();
      }
    } catch (error) {
      console.log('⚠️  Docker not available or not running');
    }
  }

  /**
   * Start Docker services for development
   */
  startDockerServices() {
    try {
      console.log('🚀 Starting Docker services...');
      execSync('docker-compose -f docker-compose.dev.yml up -d', {
        cwd: this.rootDir,
        stdio: 'inherit'
      });
      console.log('✅ Docker services started successfully');
    } catch (error) {
      console.log('⚠️  Failed to start Docker services:', error.message);
    }
  }

  /**
   * Check if Payload CMS types are up to date
   */
  checkPayloadTypes() {
    console.log('🔍 Checking Payload CMS types...');

    const payloadTypesFile = path.join(this.rootDir, 'src/payload-types.ts');

    if (!fs.existsSync(payloadTypesFile)) {
      console.log('⚠️  Payload types file not found. Generating...');
      this.generatePayloadTypes();
    } else {
      console.log('✅ Payload types file exists');
    }
  }

  /**
   * Generate Payload CMS types
   */
  generatePayloadTypes() {
    try {
      console.log('🔧 Generating Payload CMS types...');
      execSync('npm run payload:generate-types', {
        cwd: this.rootDir,
        stdio: 'inherit'
      });
      console.log('✅ Payload types generated successfully');
    } catch (error) {
      console.log('⚠️  Failed to generate Payload types:', error.message);
    }
  }

  /**
   * Ensure all development dependencies are available
   */
  checkDependencies() {
    console.log('📦 Checking development dependencies...');

    try {
      execSync('npm list --depth=0', {
        cwd: this.rootDir,
        stdio: 'pipe'
      });
      console.log('✅ Development dependencies are available');
    } catch (error) {
      console.log('⚠️  Some dependencies may be missing. Installing...');
      this.installDependencies();
    }
  }

  /**
   * Install missing dependencies
   */
  installDependencies() {
    try {
      console.log('📦 Installing dependencies...');
      execSync('npm install', {
        cwd: this.rootDir,
        stdio: 'inherit'
      });
      console.log('✅ Dependencies installed successfully');
    } catch (error) {
      console.log('⚠️  Failed to install dependencies:', error.message);
    }
  }

  /**
   * Run all environment checks
   */
  async run() {
    console.log('🚀 Starting Development Environment Check...\n');

    this.checkEnvironmentVariables();
    this.checkDockerServices();
    this.checkPayloadTypes();
    this.checkDependencies();

    console.log('\n✅ Development Environment Check Complete!');
    console.log('🎯 Your development environment should now be fully loaded.');
    console.log('💡 Run "npm run dev" to start the development server.');
  }
}

// Run the environment loader
const loader = new DevEnvironmentLoader();
loader.run().catch(console.error);
